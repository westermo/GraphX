# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# The previous line enables IntelliSense for this file.
# See this post for more info https://www.meziantou.net/enabling-intellisense-for-github-actions-workflows-in-vs-code.htm

name: Publish NuGet Package
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: windows-latest
    env:
      COMMIT_SHA: ${{ github.sha || github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
      - run: |
          If (('${{ github.event_name }}' -eq 'release') -and ('${{ github.ref_name }}' -match '^(?<version>\d+\.\d+\.\d+)')) {
            Add-Content -Path $Env:GITHUB_ENV -Value "VERSION=$($Matches.version)"
            Add-Content -Path $Env:GITHUB_ENV -Value "FILE_VERSION=$($Matches.version).0"
            Add-Content -Path $Env:GITHUB_ENV -Value "INFORMAL_VERSION=${{ github.ref_name }}"
          } else {
            Add-Content -Path $Env:GITHUB_ENV -Value "VERSION=0.0.0"
            Add-Content -Path $Env:GITHUB_ENV -Value "FILE_VERSION=0.0.0.0"
            Add-Content -Path $Env:GITHUB_ENV -Value "INFORMAL_VERSION=UNRELEASED"
          } 
        name: "Set package version meta data"
      - run: |
          dotnet pack --configuration Release --output "${{ env.NuGetDirectory }}" --property:RepositoryCommit="${{ env.COMMIT_SHA }}" --property:InformationalVersion="${{ env.INFORMAL_VERSION }}" --property:AssemblyVersion="${{ env.VERSION }}" --property:FileVersion="${{ env.VERSION }}" --property:Version="${{ env.VERSION }}"
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: windows-latest
    needs: [ create_nuget ]
    steps:
      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate the NuGet package: https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package --excluded-rules XmlDocumentationMustBePresent,Symbols (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  deploy:
    # Publish only when creating a release
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [ validate_nuget ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json
          }